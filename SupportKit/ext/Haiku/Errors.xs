#
# Automatically generated file
#

MODULE = Haiku::SupportKit	PACKAGE = Haiku::Errors

PROTOTYPES: DISABLE

SV*
B_GENERAL_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_GENERAL_ERROR_BASE);
		dualize(RETVAL, "B_GENERAL_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_OS_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_OS_ERROR_BASE);
		dualize(RETVAL, "B_OS_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_APP_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_APP_ERROR_BASE);
		dualize(RETVAL, "B_APP_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_INTERFACE_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_INTERFACE_ERROR_BASE);
		dualize(RETVAL, "B_INTERFACE_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_ERROR_BASE);
		dualize(RETVAL, "B_MEDIA_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_TRANSLATION_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_TRANSLATION_ERROR_BASE);
		dualize(RETVAL, "B_TRANSLATION_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_MIDI_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MIDI_ERROR_BASE);
		dualize(RETVAL, "B_MIDI_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_STORAGE_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_STORAGE_ERROR_BASE);
		dualize(RETVAL, "B_STORAGE_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_POSIX_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_POSIX_ERROR_BASE);
		dualize(RETVAL, "B_POSIX_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_MAIL_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_ERROR_BASE);
		dualize(RETVAL, "B_MAIL_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_PRINT_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_PRINT_ERROR_BASE);
		dualize(RETVAL, "B_PRINT_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_DEVICE_ERROR_BASE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEVICE_ERROR_BASE);
		dualize(RETVAL, "B_DEVICE_ERROR_BASE");
	OUTPUT:
		RETVAL

SV*
B_ERRORS_END()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_ERRORS_END);
		dualize(RETVAL, "B_ERRORS_END");
	OUTPUT:
		RETVAL

SV*
B_NO_MEMORY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_MEMORY);
		dualize(RETVAL, "B_NO_MEMORY");
	OUTPUT:
		RETVAL

SV*
B_IO_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_IO_ERROR);
		dualize(RETVAL, "B_IO_ERROR");
	OUTPUT:
		RETVAL

SV*
B_PERMISSION_DENIED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_PERMISSION_DENIED);
		dualize(RETVAL, "B_PERMISSION_DENIED");
	OUTPUT:
		RETVAL

SV*
B_BAD_INDEX()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_INDEX);
		dualize(RETVAL, "B_BAD_INDEX");
	OUTPUT:
		RETVAL

SV*
B_BAD_TYPE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_TYPE);
		dualize(RETVAL, "B_BAD_TYPE");
	OUTPUT:
		RETVAL

SV*
B_BAD_VALUE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_VALUE);
		dualize(RETVAL, "B_BAD_VALUE");
	OUTPUT:
		RETVAL

SV*
B_MISMATCHED_VALUES()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MISMATCHED_VALUES);
		dualize(RETVAL, "B_MISMATCHED_VALUES");
	OUTPUT:
		RETVAL

SV*
B_NAME_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NAME_NOT_FOUND);
		dualize(RETVAL, "B_NAME_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_NAME_IN_USE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NAME_IN_USE);
		dualize(RETVAL, "B_NAME_IN_USE");
	OUTPUT:
		RETVAL

SV*
B_TIMED_OUT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_TIMED_OUT);
		dualize(RETVAL, "B_TIMED_OUT");
	OUTPUT:
		RETVAL

SV*
B_INTERRUPTED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_INTERRUPTED);
		dualize(RETVAL, "B_INTERRUPTED");
	OUTPUT:
		RETVAL

SV*
B_WOULD_BLOCK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_WOULD_BLOCK);
		dualize(RETVAL, "B_WOULD_BLOCK");
	OUTPUT:
		RETVAL

SV*
B_CANCELED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_CANCELED);
		dualize(RETVAL, "B_CANCELED");
	OUTPUT:
		RETVAL

SV*
B_NO_INIT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_INIT);
		dualize(RETVAL, "B_NO_INIT");
	OUTPUT:
		RETVAL

SV*
B_NOT_INITIALIZED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NOT_INITIALIZED);
		dualize(RETVAL, "B_NOT_INITIALIZED");
	OUTPUT:
		RETVAL

SV*
B_BUSY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BUSY);
		dualize(RETVAL, "B_BUSY");
	OUTPUT:
		RETVAL

SV*
B_NOT_ALLOWED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NOT_ALLOWED);
		dualize(RETVAL, "B_NOT_ALLOWED");
	OUTPUT:
		RETVAL

SV*
B_BAD_DATA()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_DATA);
		dualize(RETVAL, "B_BAD_DATA");
	OUTPUT:
		RETVAL

SV*
B_DONT_DO_THAT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DONT_DO_THAT);
		dualize(RETVAL, "B_DONT_DO_THAT");
	OUTPUT:
		RETVAL

SV*
B_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_ERROR);
		dualize(RETVAL, "B_ERROR");
	OUTPUT:
		RETVAL

SV*
B_OK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_OK);
		dualize(RETVAL, "B_OK");
	OUTPUT:
		RETVAL

SV*
B_NO_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_ERROR);
		dualize(RETVAL, "B_NO_ERROR");
	OUTPUT:
		RETVAL

SV*
B_BAD_SEM_ID()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_SEM_ID);
		dualize(RETVAL, "B_BAD_SEM_ID");
	OUTPUT:
		RETVAL

SV*
B_NO_MORE_SEMS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_MORE_SEMS);
		dualize(RETVAL, "B_NO_MORE_SEMS");
	OUTPUT:
		RETVAL

SV*
B_BAD_THREAD_ID()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_THREAD_ID);
		dualize(RETVAL, "B_BAD_THREAD_ID");
	OUTPUT:
		RETVAL

SV*
B_NO_MORE_THREADS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_MORE_THREADS);
		dualize(RETVAL, "B_NO_MORE_THREADS");
	OUTPUT:
		RETVAL

SV*
B_BAD_THREAD_STATE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_THREAD_STATE);
		dualize(RETVAL, "B_BAD_THREAD_STATE");
	OUTPUT:
		RETVAL

SV*
B_BAD_TEAM_ID()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_TEAM_ID);
		dualize(RETVAL, "B_BAD_TEAM_ID");
	OUTPUT:
		RETVAL

SV*
B_NO_MORE_TEAMS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_MORE_TEAMS);
		dualize(RETVAL, "B_NO_MORE_TEAMS");
	OUTPUT:
		RETVAL

SV*
B_BAD_PORT_ID()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_PORT_ID);
		dualize(RETVAL, "B_BAD_PORT_ID");
	OUTPUT:
		RETVAL

SV*
B_NO_MORE_PORTS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_MORE_PORTS);
		dualize(RETVAL, "B_NO_MORE_PORTS");
	OUTPUT:
		RETVAL

SV*
B_BAD_IMAGE_ID()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_IMAGE_ID);
		dualize(RETVAL, "B_BAD_IMAGE_ID");
	OUTPUT:
		RETVAL

SV*
B_BAD_ADDRESS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_ADDRESS);
		dualize(RETVAL, "B_BAD_ADDRESS");
	OUTPUT:
		RETVAL

SV*
B_NOT_AN_EXECUTABLE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NOT_AN_EXECUTABLE);
		dualize(RETVAL, "B_NOT_AN_EXECUTABLE");
	OUTPUT:
		RETVAL

SV*
B_MISSING_LIBRARY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MISSING_LIBRARY);
		dualize(RETVAL, "B_MISSING_LIBRARY");
	OUTPUT:
		RETVAL

SV*
B_MISSING_SYMBOL()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MISSING_SYMBOL);
		dualize(RETVAL, "B_MISSING_SYMBOL");
	OUTPUT:
		RETVAL

SV*
B_DEBUGGER_ALREADY_INSTALLED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEBUGGER_ALREADY_INSTALLED);
		dualize(RETVAL, "B_DEBUGGER_ALREADY_INSTALLED");
	OUTPUT:
		RETVAL

SV*
B_BAD_REPLY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_REPLY);
		dualize(RETVAL, "B_BAD_REPLY");
	OUTPUT:
		RETVAL

SV*
B_DUPLICATE_REPLY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DUPLICATE_REPLY);
		dualize(RETVAL, "B_DUPLICATE_REPLY");
	OUTPUT:
		RETVAL

SV*
B_MESSAGE_TO_SELF()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MESSAGE_TO_SELF);
		dualize(RETVAL, "B_MESSAGE_TO_SELF");
	OUTPUT:
		RETVAL

SV*
B_BAD_HANDLER()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_HANDLER);
		dualize(RETVAL, "B_BAD_HANDLER");
	OUTPUT:
		RETVAL

SV*
B_ALREADY_RUNNING()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_ALREADY_RUNNING);
		dualize(RETVAL, "B_ALREADY_RUNNING");
	OUTPUT:
		RETVAL

SV*
B_LAUNCH_FAILED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LAUNCH_FAILED);
		dualize(RETVAL, "B_LAUNCH_FAILED");
	OUTPUT:
		RETVAL

SV*
B_AMBIGUOUS_APP_LAUNCH()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_AMBIGUOUS_APP_LAUNCH);
		dualize(RETVAL, "B_AMBIGUOUS_APP_LAUNCH");
	OUTPUT:
		RETVAL

SV*
B_UNKNOWN_MIME_TYPE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_UNKNOWN_MIME_TYPE);
		dualize(RETVAL, "B_UNKNOWN_MIME_TYPE");
	OUTPUT:
		RETVAL

SV*
B_BAD_SCRIPT_SYNTAX()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_SCRIPT_SYNTAX);
		dualize(RETVAL, "B_BAD_SCRIPT_SYNTAX");
	OUTPUT:
		RETVAL

SV*
B_LAUNCH_FAILED_NO_RESOLVE_LINK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LAUNCH_FAILED_NO_RESOLVE_LINK);
		dualize(RETVAL, "B_LAUNCH_FAILED_NO_RESOLVE_LINK");
	OUTPUT:
		RETVAL

SV*
B_LAUNCH_FAILED_EXECUTABLE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LAUNCH_FAILED_EXECUTABLE);
		dualize(RETVAL, "B_LAUNCH_FAILED_EXECUTABLE");
	OUTPUT:
		RETVAL

SV*
B_LAUNCH_FAILED_APP_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LAUNCH_FAILED_APP_NOT_FOUND);
		dualize(RETVAL, "B_LAUNCH_FAILED_APP_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_LAUNCH_FAILED_APP_IN_TRASH()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LAUNCH_FAILED_APP_IN_TRASH);
		dualize(RETVAL, "B_LAUNCH_FAILED_APP_IN_TRASH");
	OUTPUT:
		RETVAL

SV*
B_LAUNCH_FAILED_NO_PREFERRED_APP()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LAUNCH_FAILED_NO_PREFERRED_APP);
		dualize(RETVAL, "B_LAUNCH_FAILED_NO_PREFERRED_APP");
	OUTPUT:
		RETVAL

SV*
B_LAUNCH_FAILED_FILES_APP_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LAUNCH_FAILED_FILES_APP_NOT_FOUND);
		dualize(RETVAL, "B_LAUNCH_FAILED_FILES_APP_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_BAD_MIME_SNIFFER_RULE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_MIME_SNIFFER_RULE);
		dualize(RETVAL, "B_BAD_MIME_SNIFFER_RULE");
	OUTPUT:
		RETVAL

SV*
B_NOT_A_MESSAGE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NOT_A_MESSAGE);
		dualize(RETVAL, "B_NOT_A_MESSAGE");
	OUTPUT:
		RETVAL

SV*
B_SHUTDOWN_CANCELLED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_SHUTDOWN_CANCELLED);
		dualize(RETVAL, "B_SHUTDOWN_CANCELLED");
	OUTPUT:
		RETVAL

SV*
B_SHUTTING_DOWN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_SHUTTING_DOWN);
		dualize(RETVAL, "B_SHUTTING_DOWN");
	OUTPUT:
		RETVAL

SV*
B_FILE_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_FILE_ERROR);
		dualize(RETVAL, "B_FILE_ERROR");
	OUTPUT:
		RETVAL

SV*
B_FILE_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_FILE_NOT_FOUND);
		dualize(RETVAL, "B_FILE_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_FILE_EXISTS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_FILE_EXISTS);
		dualize(RETVAL, "B_FILE_EXISTS");
	OUTPUT:
		RETVAL

SV*
B_ENTRY_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_ENTRY_NOT_FOUND);
		dualize(RETVAL, "B_ENTRY_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_NAME_TOO_LONG()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NAME_TOO_LONG);
		dualize(RETVAL, "B_NAME_TOO_LONG");
	OUTPUT:
		RETVAL

SV*
B_NOT_A_DIRECTORY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NOT_A_DIRECTORY);
		dualize(RETVAL, "B_NOT_A_DIRECTORY");
	OUTPUT:
		RETVAL

SV*
B_DIRECTORY_NOT_EMPTY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DIRECTORY_NOT_EMPTY);
		dualize(RETVAL, "B_DIRECTORY_NOT_EMPTY");
	OUTPUT:
		RETVAL

SV*
B_DEVICE_FULL()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEVICE_FULL);
		dualize(RETVAL, "B_DEVICE_FULL");
	OUTPUT:
		RETVAL

SV*
B_READ_ONLY_DEVICE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_READ_ONLY_DEVICE);
		dualize(RETVAL, "B_READ_ONLY_DEVICE");
	OUTPUT:
		RETVAL

SV*
B_IS_A_DIRECTORY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_IS_A_DIRECTORY);
		dualize(RETVAL, "B_IS_A_DIRECTORY");
	OUTPUT:
		RETVAL

SV*
B_NO_MORE_FDS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_MORE_FDS);
		dualize(RETVAL, "B_NO_MORE_FDS");
	OUTPUT:
		RETVAL

SV*
B_CROSS_DEVICE_LINK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_CROSS_DEVICE_LINK);
		dualize(RETVAL, "B_CROSS_DEVICE_LINK");
	OUTPUT:
		RETVAL

SV*
B_LINK_LIMIT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LINK_LIMIT);
		dualize(RETVAL, "B_LINK_LIMIT");
	OUTPUT:
		RETVAL

SV*
B_BUSTED_PIPE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BUSTED_PIPE);
		dualize(RETVAL, "B_BUSTED_PIPE");
	OUTPUT:
		RETVAL

SV*
B_UNSUPPORTED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_UNSUPPORTED);
		dualize(RETVAL, "B_UNSUPPORTED");
	OUTPUT:
		RETVAL

SV*
B_PARTITION_TOO_SMALL()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_PARTITION_TOO_SMALL);
		dualize(RETVAL, "B_PARTITION_TOO_SMALL");
	OUTPUT:
		RETVAL

SV*
B_POSIX_ENOMEM()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_POSIX_ENOMEM);
		dualize(RETVAL, "B_POSIX_ENOMEM");
	OUTPUT:
		RETVAL

SV*
E2BIG()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)E2BIG);
		dualize(RETVAL, "E2BIG");
	OUTPUT:
		RETVAL

SV*
ECHILD()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ECHILD);
		dualize(RETVAL, "ECHILD");
	OUTPUT:
		RETVAL

SV*
EDEADLK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EDEADLK);
		dualize(RETVAL, "EDEADLK");
	OUTPUT:
		RETVAL

SV*
EFBIG()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EFBIG);
		dualize(RETVAL, "EFBIG");
	OUTPUT:
		RETVAL

SV*
EMLINK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EMLINK);
		dualize(RETVAL, "EMLINK");
	OUTPUT:
		RETVAL

SV*
ENFILE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENFILE);
		dualize(RETVAL, "ENFILE");
	OUTPUT:
		RETVAL

SV*
ENODEV()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENODEV);
		dualize(RETVAL, "ENODEV");
	OUTPUT:
		RETVAL

SV*
ENOLCK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOLCK);
		dualize(RETVAL, "ENOLCK");
	OUTPUT:
		RETVAL

SV*
ENOSYS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOSYS);
		dualize(RETVAL, "ENOSYS");
	OUTPUT:
		RETVAL

SV*
ENOTTY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOTTY);
		dualize(RETVAL, "ENOTTY");
	OUTPUT:
		RETVAL

SV*
ENXIO()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENXIO);
		dualize(RETVAL, "ENXIO");
	OUTPUT:
		RETVAL

SV*
ESPIPE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ESPIPE);
		dualize(RETVAL, "ESPIPE");
	OUTPUT:
		RETVAL

SV*
ESRCH()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ESRCH);
		dualize(RETVAL, "ESRCH");
	OUTPUT:
		RETVAL

SV*
EFPOS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EFPOS);
		dualize(RETVAL, "EFPOS");
	OUTPUT:
		RETVAL

SV*
ESIGPARM()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ESIGPARM);
		dualize(RETVAL, "ESIGPARM");
	OUTPUT:
		RETVAL

SV*
EDOM()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EDOM);
		dualize(RETVAL, "EDOM");
	OUTPUT:
		RETVAL

SV*
ERANGE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ERANGE);
		dualize(RETVAL, "ERANGE");
	OUTPUT:
		RETVAL

SV*
EPROTOTYPE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EPROTOTYPE);
		dualize(RETVAL, "EPROTOTYPE");
	OUTPUT:
		RETVAL

SV*
EPROTONOSUPPORT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EPROTONOSUPPORT);
		dualize(RETVAL, "EPROTONOSUPPORT");
	OUTPUT:
		RETVAL

SV*
EPFNOSUPPORT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EPFNOSUPPORT);
		dualize(RETVAL, "EPFNOSUPPORT");
	OUTPUT:
		RETVAL

SV*
EAFNOSUPPORT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EAFNOSUPPORT);
		dualize(RETVAL, "EAFNOSUPPORT");
	OUTPUT:
		RETVAL

SV*
EADDRINUSE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EADDRINUSE);
		dualize(RETVAL, "EADDRINUSE");
	OUTPUT:
		RETVAL

SV*
EADDRNOTAVAIL()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EADDRNOTAVAIL);
		dualize(RETVAL, "EADDRNOTAVAIL");
	OUTPUT:
		RETVAL

SV*
ENETDOWN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENETDOWN);
		dualize(RETVAL, "ENETDOWN");
	OUTPUT:
		RETVAL

SV*
ENETUNREACH()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENETUNREACH);
		dualize(RETVAL, "ENETUNREACH");
	OUTPUT:
		RETVAL

SV*
ENETRESET()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENETRESET);
		dualize(RETVAL, "ENETRESET");
	OUTPUT:
		RETVAL

SV*
ECONNABORTED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ECONNABORTED);
		dualize(RETVAL, "ECONNABORTED");
	OUTPUT:
		RETVAL

SV*
ECONNRESET()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ECONNRESET);
		dualize(RETVAL, "ECONNRESET");
	OUTPUT:
		RETVAL

SV*
EISCONN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EISCONN);
		dualize(RETVAL, "EISCONN");
	OUTPUT:
		RETVAL

SV*
ENOTCONN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOTCONN);
		dualize(RETVAL, "ENOTCONN");
	OUTPUT:
		RETVAL

SV*
ESHUTDOWN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ESHUTDOWN);
		dualize(RETVAL, "ESHUTDOWN");
	OUTPUT:
		RETVAL

SV*
ECONNREFUSED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ECONNREFUSED);
		dualize(RETVAL, "ECONNREFUSED");
	OUTPUT:
		RETVAL

SV*
EHOSTUNREACH()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EHOSTUNREACH);
		dualize(RETVAL, "EHOSTUNREACH");
	OUTPUT:
		RETVAL

SV*
ENOPROTOOPT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOPROTOOPT);
		dualize(RETVAL, "ENOPROTOOPT");
	OUTPUT:
		RETVAL

SV*
ENOBUFS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOBUFS);
		dualize(RETVAL, "ENOBUFS");
	OUTPUT:
		RETVAL

SV*
EINPROGRESS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EINPROGRESS);
		dualize(RETVAL, "EINPROGRESS");
	OUTPUT:
		RETVAL

SV*
EALREADY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EALREADY);
		dualize(RETVAL, "EALREADY");
	OUTPUT:
		RETVAL

SV*
EILSEQ()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EILSEQ);
		dualize(RETVAL, "EILSEQ");
	OUTPUT:
		RETVAL

SV*
ENOMSG()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOMSG);
		dualize(RETVAL, "ENOMSG");
	OUTPUT:
		RETVAL

SV*
ESTALE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ESTALE);
		dualize(RETVAL, "ESTALE");
	OUTPUT:
		RETVAL

SV*
EOVERFLOW()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EOVERFLOW);
		dualize(RETVAL, "EOVERFLOW");
	OUTPUT:
		RETVAL

SV*
EMSGSIZE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EMSGSIZE);
		dualize(RETVAL, "EMSGSIZE");
	OUTPUT:
		RETVAL

SV*
EOPNOTSUPP()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EOPNOTSUPP);
		dualize(RETVAL, "EOPNOTSUPP");
	OUTPUT:
		RETVAL

SV*
ENOTSOCK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOTSOCK);
		dualize(RETVAL, "ENOTSOCK");
	OUTPUT:
		RETVAL

SV*
EHOSTDOWN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EHOSTDOWN);
		dualize(RETVAL, "EHOSTDOWN");
	OUTPUT:
		RETVAL

SV*
EBADMSG()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EBADMSG);
		dualize(RETVAL, "EBADMSG");
	OUTPUT:
		RETVAL

SV*
ECANCELED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ECANCELED);
		dualize(RETVAL, "ECANCELED");
	OUTPUT:
		RETVAL

SV*
EDESTADDRREQ()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EDESTADDRREQ);
		dualize(RETVAL, "EDESTADDRREQ");
	OUTPUT:
		RETVAL

SV*
EDQUOT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EDQUOT);
		dualize(RETVAL, "EDQUOT");
	OUTPUT:
		RETVAL

SV*
EIDRM()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EIDRM);
		dualize(RETVAL, "EIDRM");
	OUTPUT:
		RETVAL

SV*
EMULTIHOP()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EMULTIHOP);
		dualize(RETVAL, "EMULTIHOP");
	OUTPUT:
		RETVAL

SV*
ENODATA()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENODATA);
		dualize(RETVAL, "ENODATA");
	OUTPUT:
		RETVAL

SV*
ENOLINK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOLINK);
		dualize(RETVAL, "ENOLINK");
	OUTPUT:
		RETVAL

SV*
ENOSR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOSR);
		dualize(RETVAL, "ENOSR");
	OUTPUT:
		RETVAL

SV*
ENOSTR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOSTR);
		dualize(RETVAL, "ENOSTR");
	OUTPUT:
		RETVAL

SV*
ENOTSUP()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOTSUP);
		dualize(RETVAL, "ENOTSUP");
	OUTPUT:
		RETVAL

SV*
EPROTO()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EPROTO);
		dualize(RETVAL, "EPROTO");
	OUTPUT:
		RETVAL

SV*
ETIME()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ETIME);
		dualize(RETVAL, "ETIME");
	OUTPUT:
		RETVAL

SV*
ETXTBSY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ETXTBSY);
		dualize(RETVAL, "ETXTBSY");
	OUTPUT:
		RETVAL

SV*
ENOATTR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOATTR);
		dualize(RETVAL, "ENOATTR");
	OUTPUT:
		RETVAL

SV*
ENOMEM()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOMEM);
		dualize(RETVAL, "ENOMEM");
	OUTPUT:
		RETVAL

SV*
EACCES()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EACCES);
		dualize(RETVAL, "EACCES");
	OUTPUT:
		RETVAL

SV*
EINTR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EINTR);
		dualize(RETVAL, "EINTR");
	OUTPUT:
		RETVAL

SV*
EIO()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EIO);
		dualize(RETVAL, "EIO");
	OUTPUT:
		RETVAL

SV*
EBUSY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EBUSY);
		dualize(RETVAL, "EBUSY");
	OUTPUT:
		RETVAL

SV*
EFAULT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EFAULT);
		dualize(RETVAL, "EFAULT");
	OUTPUT:
		RETVAL

SV*
ETIMEDOUT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ETIMEDOUT);
		dualize(RETVAL, "ETIMEDOUT");
	OUTPUT:
		RETVAL

SV*
EAGAIN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EAGAIN);
		dualize(RETVAL, "EAGAIN");
	OUTPUT:
		RETVAL

SV*
EWOULDBLOCK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EWOULDBLOCK);
		dualize(RETVAL, "EWOULDBLOCK");
	OUTPUT:
		RETVAL

SV*
EBADF()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EBADF);
		dualize(RETVAL, "EBADF");
	OUTPUT:
		RETVAL

SV*
EEXIST()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EEXIST);
		dualize(RETVAL, "EEXIST");
	OUTPUT:
		RETVAL

SV*
EINVAL()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EINVAL);
		dualize(RETVAL, "EINVAL");
	OUTPUT:
		RETVAL

SV*
ENAMETOOLONG()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENAMETOOLONG);
		dualize(RETVAL, "ENAMETOOLONG");
	OUTPUT:
		RETVAL

SV*
ENOENT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOENT);
		dualize(RETVAL, "ENOENT");
	OUTPUT:
		RETVAL

SV*
EPERM()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EPERM);
		dualize(RETVAL, "EPERM");
	OUTPUT:
		RETVAL

SV*
ENOTDIR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOTDIR);
		dualize(RETVAL, "ENOTDIR");
	OUTPUT:
		RETVAL

SV*
EISDIR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EISDIR);
		dualize(RETVAL, "EISDIR");
	OUTPUT:
		RETVAL

SV*
ENOTEMPTY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOTEMPTY);
		dualize(RETVAL, "ENOTEMPTY");
	OUTPUT:
		RETVAL

SV*
ENOSPC()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOSPC);
		dualize(RETVAL, "ENOSPC");
	OUTPUT:
		RETVAL

SV*
EROFS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EROFS);
		dualize(RETVAL, "EROFS");
	OUTPUT:
		RETVAL

SV*
EMFILE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EMFILE);
		dualize(RETVAL, "EMFILE");
	OUTPUT:
		RETVAL

SV*
EXDEV()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EXDEV);
		dualize(RETVAL, "EXDEV");
	OUTPUT:
		RETVAL

SV*
ELOOP()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ELOOP);
		dualize(RETVAL, "ELOOP");
	OUTPUT:
		RETVAL

SV*
ENOEXEC()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)ENOEXEC);
		dualize(RETVAL, "ENOEXEC");
	OUTPUT:
		RETVAL

SV*
EPIPE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)EPIPE);
		dualize(RETVAL, "EPIPE");
	OUTPUT:
		RETVAL

SV*
B_BUFFER_OVERFLOW()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BUFFER_OVERFLOW);
		dualize(RETVAL, "B_BUFFER_OVERFLOW");
	OUTPUT:
		RETVAL

SV*
B_TOO_MANY_ARGS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_TOO_MANY_ARGS);
		dualize(RETVAL, "B_TOO_MANY_ARGS");
	OUTPUT:
		RETVAL

SV*
B_FILE_TOO_LARGE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_FILE_TOO_LARGE);
		dualize(RETVAL, "B_FILE_TOO_LARGE");
	OUTPUT:
		RETVAL

SV*
B_RESULT_NOT_REPRESENTABLE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_RESULT_NOT_REPRESENTABLE);
		dualize(RETVAL, "B_RESULT_NOT_REPRESENTABLE");
	OUTPUT:
		RETVAL

SV*
B_DEVICE_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEVICE_NOT_FOUND);
		dualize(RETVAL, "B_DEVICE_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_NOT_SUPPORTED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NOT_SUPPORTED);
		dualize(RETVAL, "B_NOT_SUPPORTED");
	OUTPUT:
		RETVAL

SV*
B_STREAM_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_STREAM_NOT_FOUND);
		dualize(RETVAL, "B_STREAM_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_SERVER_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_SERVER_NOT_FOUND);
		dualize(RETVAL, "B_SERVER_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_RESOURCE_NOT_FOUND()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_RESOURCE_NOT_FOUND);
		dualize(RETVAL, "B_RESOURCE_NOT_FOUND");
	OUTPUT:
		RETVAL

SV*
B_RESOURCE_UNAVAILABLE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_RESOURCE_UNAVAILABLE);
		dualize(RETVAL, "B_RESOURCE_UNAVAILABLE");
	OUTPUT:
		RETVAL

SV*
B_BAD_SUBSCRIBER()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BAD_SUBSCRIBER);
		dualize(RETVAL, "B_BAD_SUBSCRIBER");
	OUTPUT:
		RETVAL

SV*
B_SUBSCRIBER_NOT_ENTERED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_SUBSCRIBER_NOT_ENTERED);
		dualize(RETVAL, "B_SUBSCRIBER_NOT_ENTERED");
	OUTPUT:
		RETVAL

SV*
B_BUFFER_NOT_AVAILABLE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_BUFFER_NOT_AVAILABLE);
		dualize(RETVAL, "B_BUFFER_NOT_AVAILABLE");
	OUTPUT:
		RETVAL

SV*
B_LAST_BUFFER_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_LAST_BUFFER_ERROR);
		dualize(RETVAL, "B_LAST_BUFFER_ERROR");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_SYSTEM_FAILURE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_SYSTEM_FAILURE);
		dualize(RETVAL, "B_MEDIA_SYSTEM_FAILURE");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_BAD_NODE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_BAD_NODE);
		dualize(RETVAL, "B_MEDIA_BAD_NODE");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_NODE_BUSY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_NODE_BUSY);
		dualize(RETVAL, "B_MEDIA_NODE_BUSY");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_BAD_FORMAT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_BAD_FORMAT);
		dualize(RETVAL, "B_MEDIA_BAD_FORMAT");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_BAD_BUFFER()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_BAD_BUFFER);
		dualize(RETVAL, "B_MEDIA_BAD_BUFFER");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_TOO_MANY_NODES()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_TOO_MANY_NODES);
		dualize(RETVAL, "B_MEDIA_TOO_MANY_NODES");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_TOO_MANY_BUFFERS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_TOO_MANY_BUFFERS);
		dualize(RETVAL, "B_MEDIA_TOO_MANY_BUFFERS");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_NODE_ALREADY_EXISTS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_NODE_ALREADY_EXISTS);
		dualize(RETVAL, "B_MEDIA_NODE_ALREADY_EXISTS");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_BUFFER_ALREADY_EXISTS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_BUFFER_ALREADY_EXISTS);
		dualize(RETVAL, "B_MEDIA_BUFFER_ALREADY_EXISTS");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_CANNOT_SEEK()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_CANNOT_SEEK);
		dualize(RETVAL, "B_MEDIA_CANNOT_SEEK");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_CANNOT_CHANGE_RUN_MODE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_CANNOT_CHANGE_RUN_MODE);
		dualize(RETVAL, "B_MEDIA_CANNOT_CHANGE_RUN_MODE");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_APP_ALREADY_REGISTERED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_APP_ALREADY_REGISTERED);
		dualize(RETVAL, "B_MEDIA_APP_ALREADY_REGISTERED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_APP_NOT_REGISTERED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_APP_NOT_REGISTERED);
		dualize(RETVAL, "B_MEDIA_APP_NOT_REGISTERED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_CANNOT_RECLAIM_BUFFERS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_CANNOT_RECLAIM_BUFFERS);
		dualize(RETVAL, "B_MEDIA_CANNOT_RECLAIM_BUFFERS");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_BUFFERS_NOT_RECLAIMED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_BUFFERS_NOT_RECLAIMED);
		dualize(RETVAL, "B_MEDIA_BUFFERS_NOT_RECLAIMED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_TIME_SOURCE_STOPPED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_TIME_SOURCE_STOPPED);
		dualize(RETVAL, "B_MEDIA_TIME_SOURCE_STOPPED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_TIME_SOURCE_BUSY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_TIME_SOURCE_BUSY);
		dualize(RETVAL, "B_MEDIA_TIME_SOURCE_BUSY");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_BAD_SOURCE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_BAD_SOURCE);
		dualize(RETVAL, "B_MEDIA_BAD_SOURCE");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_BAD_DESTINATION()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_BAD_DESTINATION);
		dualize(RETVAL, "B_MEDIA_BAD_DESTINATION");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_ALREADY_CONNECTED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_ALREADY_CONNECTED);
		dualize(RETVAL, "B_MEDIA_ALREADY_CONNECTED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_NOT_CONNECTED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_NOT_CONNECTED);
		dualize(RETVAL, "B_MEDIA_NOT_CONNECTED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_BAD_CLIP_FORMAT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_BAD_CLIP_FORMAT);
		dualize(RETVAL, "B_MEDIA_BAD_CLIP_FORMAT");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_ADDON_FAILED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_ADDON_FAILED);
		dualize(RETVAL, "B_MEDIA_ADDON_FAILED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_ADDON_DISABLED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_ADDON_DISABLED);
		dualize(RETVAL, "B_MEDIA_ADDON_DISABLED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_CHANGE_IN_PROGRESS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_CHANGE_IN_PROGRESS);
		dualize(RETVAL, "B_MEDIA_CHANGE_IN_PROGRESS");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_STALE_CHANGE_COUNT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_STALE_CHANGE_COUNT);
		dualize(RETVAL, "B_MEDIA_STALE_CHANGE_COUNT");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_ADDON_RESTRICTED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_ADDON_RESTRICTED);
		dualize(RETVAL, "B_MEDIA_ADDON_RESTRICTED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_NO_HANDLER()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_NO_HANDLER);
		dualize(RETVAL, "B_MEDIA_NO_HANDLER");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_DUPLICATE_FORMAT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_DUPLICATE_FORMAT);
		dualize(RETVAL, "B_MEDIA_DUPLICATE_FORMAT");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_REALTIME_DISABLED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_REALTIME_DISABLED);
		dualize(RETVAL, "B_MEDIA_REALTIME_DISABLED");
	OUTPUT:
		RETVAL

SV*
B_MEDIA_REALTIME_UNAVAILABLE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MEDIA_REALTIME_UNAVAILABLE);
		dualize(RETVAL, "B_MEDIA_REALTIME_UNAVAILABLE");
	OUTPUT:
		RETVAL

SV*
B_MAIL_NO_DAEMON()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_NO_DAEMON);
		dualize(RETVAL, "B_MAIL_NO_DAEMON");
	OUTPUT:
		RETVAL

SV*
B_MAIL_UNKNOWN_USER()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_UNKNOWN_USER);
		dualize(RETVAL, "B_MAIL_UNKNOWN_USER");
	OUTPUT:
		RETVAL

SV*
B_MAIL_WRONG_PASSWORD()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_WRONG_PASSWORD);
		dualize(RETVAL, "B_MAIL_WRONG_PASSWORD");
	OUTPUT:
		RETVAL

SV*
B_MAIL_UNKNOWN_HOST()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_UNKNOWN_HOST);
		dualize(RETVAL, "B_MAIL_UNKNOWN_HOST");
	OUTPUT:
		RETVAL

SV*
B_MAIL_ACCESS_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_ACCESS_ERROR);
		dualize(RETVAL, "B_MAIL_ACCESS_ERROR");
	OUTPUT:
		RETVAL

SV*
B_MAIL_UNKNOWN_FIELD()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_UNKNOWN_FIELD);
		dualize(RETVAL, "B_MAIL_UNKNOWN_FIELD");
	OUTPUT:
		RETVAL

SV*
B_MAIL_NO_RECIPIENT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_NO_RECIPIENT);
		dualize(RETVAL, "B_MAIL_NO_RECIPIENT");
	OUTPUT:
		RETVAL

SV*
B_MAIL_INVALID_MAIL()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_MAIL_INVALID_MAIL);
		dualize(RETVAL, "B_MAIL_INVALID_MAIL");
	OUTPUT:
		RETVAL

SV*
B_NO_PRINT_SERVER()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_PRINT_SERVER);
		dualize(RETVAL, "B_NO_PRINT_SERVER");
	OUTPUT:
		RETVAL

SV*
B_DEV_INVALID_IOCTL()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_INVALID_IOCTL);
		dualize(RETVAL, "B_DEV_INVALID_IOCTL");
	OUTPUT:
		RETVAL

SV*
B_DEV_NO_MEMORY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_NO_MEMORY);
		dualize(RETVAL, "B_DEV_NO_MEMORY");
	OUTPUT:
		RETVAL

SV*
B_DEV_BAD_DRIVE_NUM()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_BAD_DRIVE_NUM);
		dualize(RETVAL, "B_DEV_BAD_DRIVE_NUM");
	OUTPUT:
		RETVAL

SV*
B_DEV_NO_MEDIA()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_NO_MEDIA);
		dualize(RETVAL, "B_DEV_NO_MEDIA");
	OUTPUT:
		RETVAL

SV*
B_DEV_UNREADABLE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_UNREADABLE);
		dualize(RETVAL, "B_DEV_UNREADABLE");
	OUTPUT:
		RETVAL

SV*
B_DEV_FORMAT_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_FORMAT_ERROR);
		dualize(RETVAL, "B_DEV_FORMAT_ERROR");
	OUTPUT:
		RETVAL

SV*
B_DEV_TIMEOUT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_TIMEOUT);
		dualize(RETVAL, "B_DEV_TIMEOUT");
	OUTPUT:
		RETVAL

SV*
B_DEV_RECALIBRATE_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_RECALIBRATE_ERROR);
		dualize(RETVAL, "B_DEV_RECALIBRATE_ERROR");
	OUTPUT:
		RETVAL

SV*
B_DEV_SEEK_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_SEEK_ERROR);
		dualize(RETVAL, "B_DEV_SEEK_ERROR");
	OUTPUT:
		RETVAL

SV*
B_DEV_ID_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_ID_ERROR);
		dualize(RETVAL, "B_DEV_ID_ERROR");
	OUTPUT:
		RETVAL

SV*
B_DEV_READ_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_READ_ERROR);
		dualize(RETVAL, "B_DEV_READ_ERROR");
	OUTPUT:
		RETVAL

SV*
B_DEV_WRITE_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_WRITE_ERROR);
		dualize(RETVAL, "B_DEV_WRITE_ERROR");
	OUTPUT:
		RETVAL

SV*
B_DEV_NOT_READY()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_NOT_READY);
		dualize(RETVAL, "B_DEV_NOT_READY");
	OUTPUT:
		RETVAL

SV*
B_DEV_MEDIA_CHANGED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_MEDIA_CHANGED);
		dualize(RETVAL, "B_DEV_MEDIA_CHANGED");
	OUTPUT:
		RETVAL

SV*
B_DEV_MEDIA_CHANGE_REQUESTED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_MEDIA_CHANGE_REQUESTED);
		dualize(RETVAL, "B_DEV_MEDIA_CHANGE_REQUESTED");
	OUTPUT:
		RETVAL

SV*
B_DEV_RESOURCE_CONFLICT()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_RESOURCE_CONFLICT);
		dualize(RETVAL, "B_DEV_RESOURCE_CONFLICT");
	OUTPUT:
		RETVAL

SV*
B_DEV_CONFIGURATION_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_CONFIGURATION_ERROR);
		dualize(RETVAL, "B_DEV_CONFIGURATION_ERROR");
	OUTPUT:
		RETVAL

SV*
B_DEV_DISABLED_BY_USER()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_DISABLED_BY_USER);
		dualize(RETVAL, "B_DEV_DISABLED_BY_USER");
	OUTPUT:
		RETVAL

SV*
B_DEV_DOOR_OPEN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_DOOR_OPEN);
		dualize(RETVAL, "B_DEV_DOOR_OPEN");
	OUTPUT:
		RETVAL

SV*
B_DEV_INVALID_PIPE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_INVALID_PIPE);
		dualize(RETVAL, "B_DEV_INVALID_PIPE");
	OUTPUT:
		RETVAL

SV*
B_DEV_CRC_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_CRC_ERROR);
		dualize(RETVAL, "B_DEV_CRC_ERROR");
	OUTPUT:
		RETVAL

SV*
B_DEV_STALLED()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_STALLED);
		dualize(RETVAL, "B_DEV_STALLED");
	OUTPUT:
		RETVAL

SV*
B_DEV_BAD_PID()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_BAD_PID);
		dualize(RETVAL, "B_DEV_BAD_PID");
	OUTPUT:
		RETVAL

SV*
B_DEV_UNEXPECTED_PID()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_UNEXPECTED_PID);
		dualize(RETVAL, "B_DEV_UNEXPECTED_PID");
	OUTPUT:
		RETVAL

SV*
B_DEV_DATA_OVERRUN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_DATA_OVERRUN);
		dualize(RETVAL, "B_DEV_DATA_OVERRUN");
	OUTPUT:
		RETVAL

SV*
B_DEV_DATA_UNDERRUN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_DATA_UNDERRUN);
		dualize(RETVAL, "B_DEV_DATA_UNDERRUN");
	OUTPUT:
		RETVAL

SV*
B_DEV_FIFO_OVERRUN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_FIFO_OVERRUN);
		dualize(RETVAL, "B_DEV_FIFO_OVERRUN");
	OUTPUT:
		RETVAL

SV*
B_DEV_FIFO_UNDERRUN()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_FIFO_UNDERRUN);
		dualize(RETVAL, "B_DEV_FIFO_UNDERRUN");
	OUTPUT:
		RETVAL

SV*
B_DEV_PENDING()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_PENDING);
		dualize(RETVAL, "B_DEV_PENDING");
	OUTPUT:
		RETVAL

SV*
B_DEV_MULTIPLE_ERRORS()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_MULTIPLE_ERRORS);
		dualize(RETVAL, "B_DEV_MULTIPLE_ERRORS");
	OUTPUT:
		RETVAL

SV*
B_DEV_TOO_LATE()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_DEV_TOO_LATE);
		dualize(RETVAL, "B_DEV_TOO_LATE");
	OUTPUT:
		RETVAL

SV*
B_TRANSLATION_BASE_ERROR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_TRANSLATION_BASE_ERROR);
		dualize(RETVAL, "B_TRANSLATION_BASE_ERROR");
	OUTPUT:
		RETVAL

SV*
B_NO_TRANSLATOR()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_NO_TRANSLATOR);
		dualize(RETVAL, "B_NO_TRANSLATOR");
	OUTPUT:
		RETVAL

SV*
B_ILLEGAL_DATA()
	CODE:
		RETVAL = newSV(0);
		sv_setiv(RETVAL, (IV)B_ILLEGAL_DATA);
		dualize(RETVAL, "B_ILLEGAL_DATA");
	OUTPUT:
		RETVAL

# xsubpp only enables overloaded operators for the initial module; additional
# modules are out of luck unless they roll their own, so that's what we do
# (XS_Haiku__SupportKit_nil defined automatically by xsubpp)
BOOT:
	sv_setsv(
		get_sv("Haiku::Errors::()", TRUE),
		&PL_sv_yes	// so we don't get fallback errors
	);
    newXS("Haiku::Errors::()", XS_Haiku__SupportKit_nil, file);

